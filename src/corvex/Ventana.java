/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package corvex;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.python.util.PythonInterpreter;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import javax.swing.JFileChooser;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.text.AbstractDocument;
import java.util.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.python.*;
import org.python.core.PyString;
import org.python.core.PySystemState;
import org.python.util.*;
import otros.Py;

/**
 *
 * @author nihil
 */
public class Ventana extends javax.swing.JFrame {
    NumeroLinea numerolinea;
    JFileChooser seleccionar = new JFileChooser();
    File archivo;
    FileInputStream entrada;
    FileOutputStream salida;
    
    //Variables Globales
    /*static String direccionDanielLex="C:\\Users\\nihil\\OneDrive\\Escritorio\\Compiladores 1\\Final\\Tercera Part\\Corvex\\python\\automata.py";
    static String direccionAlexisLex="C:\\Users\\bukch\\Desktop\\univrsidad\\compilador\\Entrega_3er_parcial\\Corvex\\python\\automata.py";
    static String direccionDanielError="C:\\Users\\nihil\\OneDrive\\Escritorio\\Compiladores 1\\Final\\Tercera Part\\Corvex\\error.txt";
    static String direccionAlexisError="C:\\Users\\bukch\\Desktop\\univrsidad\\compilador\\Entrega_3er_parcial\\Corvex\\error.txt";
    static String direccionDanielSint="C:\\Users\\nihil\\OneDrive\\Escritorio\\Compiladores 1\\Final\\Tercera Part\\Corvex\\python\\sintactico.py";
    static String direccionAlexisSint="C:\\Users\\bukch\\Desktop\\univrsidad\\compilador\\Entrega_3er_parcial\\Corvex\\python\\anaSint.py";
    static String dirTemp="C:\\Users\\bukch\\Desktop\\univrsidad\\compilador\\Entrega_3er_parcial\\Corvex\\python\\anaLex.py";; old*/
    //static String dirTemp2="C:\\Users\\julio\\Desktop\\Corvex\\error.txt";
    public String ruta="";
    String rutaActual=System.getProperty("user.dir");
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        inicializar();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("CORVEX IDE v1.5");
        pintarColores();

    }
    
    private void inicializar(){
        numerolinea = new NumeroLinea(jTextPaneCodigo);
        jScrollPane1.setRowHeaderView(numerolinea);
    } 
    

    //Funciones para abrir archivos
    public String abrirArchivo(File archivo) {
        String documento = "";
        try {
            entrada = new FileInputStream(archivo);
            int ascii;
            while ((ascii = entrada.read()) != -1) {
                char caracter = (char) ascii;
                documento += caracter;
                
            }

        } catch (IOException e) {
        }
        return documento;
    }
  

    public String guardarArchivo(File archivo, String documento) {
        String msj = null;
        try {
            salida = new FileOutputStream(archivo);
            byte[] bytxt = documento.getBytes();
            salida.write(bytxt);
            msj = "Archivo Guardado Correctamente";
        } catch (IOException e) {
        }
        return msj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPrincipal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneCodigo = new javax.swing.JTextPane();
        jTabbedPaneTypes = new javax.swing.JTabbedPane();
        jPanelLexico = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLexico = new javax.swing.JTextArea();
        jPanelSintactico = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaSintactico = new javax.swing.JTextArea();
        jPanelSemantico = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaSemantico = new javax.swing.JTextArea();
        jPanelCI = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaCI = new javax.swing.JTextArea();
        jTabbedPaneResultados = new javax.swing.JTabbedPane();
        jPanelErrores = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaErrores = new javax.swing.JTextArea();
        jPanelResultados = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaResultados = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuItemArchivo = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuEditar = new javax.swing.JMenu();
        jMenuFormato = new javax.swing.JMenu();
        jMenuCompilar = new javax.swing.JMenu();
        jMenuItemComp = new javax.swing.JMenuItem();
        jMenuItemDebug = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelPrincipal.setBackground(new java.awt.Color(21, 30, 33));
        jPanelPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextPaneCodigo.setBackground(new java.awt.Color(150, 150, 150));
        jTextPaneCodigo.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jTextPaneCodigo.setForeground(new java.awt.Color(0, 51, 102));
        jScrollPane1.setViewportView(jTextPaneCodigo);

        jPanelPrincipal.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 780, 470));

        jTextAreaLexico.setEditable(false);
        jTextAreaLexico.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaLexico.setColumns(20);
        jTextAreaLexico.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jTextAreaLexico.setForeground(new java.awt.Color(0, 51, 51));
        jTextAreaLexico.setRows(5);
        jScrollPane2.setViewportView(jTextAreaLexico);

        javax.swing.GroupLayout jPanelLexicoLayout = new javax.swing.GroupLayout(jPanelLexico);
        jPanelLexico.setLayout(jPanelLexicoLayout);
        jPanelLexicoLayout.setHorizontalGroup(
            jPanelLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        jPanelLexicoLayout.setVerticalGroup(
            jPanelLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        );

        jTabbedPaneTypes.addTab("Léxico", jPanelLexico);

        jTextAreaSintactico.setEditable(false);
        jTextAreaSintactico.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaSintactico.setColumns(20);
        jTextAreaSintactico.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jTextAreaSintactico.setForeground(new java.awt.Color(51, 0, 0));
        jTextAreaSintactico.setRows(5);
        jScrollPane8.setViewportView(jTextAreaSintactico);

        javax.swing.GroupLayout jPanelSintacticoLayout = new javax.swing.GroupLayout(jPanelSintactico);
        jPanelSintactico.setLayout(jPanelSintacticoLayout);
        jPanelSintacticoLayout.setHorizontalGroup(
            jPanelSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
        jPanelSintacticoLayout.setVerticalGroup(
            jPanelSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        jTabbedPaneTypes.addTab("Sintáctico", jPanelSintactico);

        jTextAreaSemantico.setEditable(false);
        jTextAreaSemantico.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaSemantico.setColumns(20);
        jTextAreaSemantico.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jTextAreaSemantico.setForeground(new java.awt.Color(0, 51, 51));
        jTextAreaSemantico.setRows(5);
        jScrollPane4.setViewportView(jTextAreaSemantico);

        javax.swing.GroupLayout jPanelSemanticoLayout = new javax.swing.GroupLayout(jPanelSemantico);
        jPanelSemantico.setLayout(jPanelSemanticoLayout);
        jPanelSemanticoLayout.setHorizontalGroup(
            jPanelSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        jPanelSemanticoLayout.setVerticalGroup(
            jPanelSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        jTabbedPaneTypes.addTab("Semántico", jPanelSemantico);

        jTextAreaCI.setEditable(false);
        jTextAreaCI.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaCI.setColumns(20);
        jTextAreaCI.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jTextAreaCI.setForeground(new java.awt.Color(0, 51, 51));
        jTextAreaCI.setRows(5);
        jScrollPane5.setViewportView(jTextAreaCI);

        javax.swing.GroupLayout jPanelCILayout = new javax.swing.GroupLayout(jPanelCI);
        jPanelCI.setLayout(jPanelCILayout);
        jPanelCILayout.setHorizontalGroup(
            jPanelCILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        jPanelCILayout.setVerticalGroup(
            jPanelCILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        );

        jTabbedPaneTypes.addTab("Código Interno", jPanelCI);

        jPanelPrincipal.add(jTabbedPaneTypes, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 40, 520, 470));

        jTextAreaErrores.setEditable(false);
        jTextAreaErrores.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaErrores.setColumns(20);
        jTextAreaErrores.setFont(new java.awt.Font("Myanmar Text", 1, 14)); // NOI18N
        jTextAreaErrores.setForeground(new java.awt.Color(153, 0, 0));
        jTextAreaErrores.setRows(5);
        jScrollPane6.setViewportView(jTextAreaErrores);

        javax.swing.GroupLayout jPanelErroresLayout = new javax.swing.GroupLayout(jPanelErrores);
        jPanelErrores.setLayout(jPanelErroresLayout);
        jPanelErroresLayout.setHorizontalGroup(
            jPanelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
        );
        jPanelErroresLayout.setVerticalGroup(
            jPanelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPaneResultados.addTab("Errores", jPanelErrores);

        jTextAreaResultados.setBackground(new java.awt.Color(150, 150, 150));
        jTextAreaResultados.setColumns(20);
        jTextAreaResultados.setFont(new java.awt.Font("Myanmar Text", 1, 24)); // NOI18N
        jTextAreaResultados.setForeground(new java.awt.Color(0, 51, 51));
        jTextAreaResultados.setRows(5);
        jScrollPane7.setViewportView(jTextAreaResultados);

        javax.swing.GroupLayout jPanelResultadosLayout = new javax.swing.GroupLayout(jPanelResultados);
        jPanelResultados.setLayout(jPanelResultadosLayout);
        jPanelResultadosLayout.setHorizontalGroup(
            jPanelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
        );
        jPanelResultadosLayout.setVerticalGroup(
            jPanelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPaneResultados.addTab("Resultados", jPanelResultados);

        jPanelPrincipal.add(jTabbedPaneResultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 520, 830, 160));

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N

        jMenuArchivo.setText("Archivo");

        jMenuItemArchivo.setText("Abrir");
        jMenuItemArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemArchivoActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemArchivo);

        jMenuItemGuardar.setText("Guardar");
        jMenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemGuardar);

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemSalir);

        jMenuBar1.add(jMenuArchivo);

        jMenuEditar.setText("Editar");
        jMenuBar1.add(jMenuEditar);

        jMenuFormato.setText("Formato");
        jMenuBar1.add(jMenuFormato);

        jMenuCompilar.setText("Compilar");

        jMenuItemComp.setText("Compilar");
        jMenuItemComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompActionPerformed(evt);
            }
        });
        jMenuCompilar.add(jMenuItemComp);

        jMenuItemDebug.setText("Debug");
        jMenuCompilar.add(jMenuItemDebug);

        jMenuBar1.add(jMenuCompilar);

        jMenu2.setText("Ayuda");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jMenuItemArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemArchivoActionPerformed
        // TODO add your handling code here:
        if (seleccionar.showDialog(this, "Abrir") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionar.getSelectedFile();
            if (archivo.canRead()) {
                if (archivo.getName().endsWith("txt")) {
                    String documento = abrirArchivo(archivo);
                    jTextPaneCodigo.setText(documento);
                } else {
                    JOptionPane.showMessageDialog(this, "Archivo inválido");
                }
            }
        }
    }//GEN-LAST:event_jMenuItemArchivoActionPerformed

    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
        // TODO add your handling code here:
        if (seleccionar.showDialog(this, "Guardar") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionar.getSelectedFile();
            if (archivo.getName().endsWith("txt")) {
                String doc = jTextPaneCodigo.getText();
                String msj = guardarArchivo(archivo, doc);
                if (msj != null) {
                    JOptionPane.showMessageDialog(this, msj);
                } else {
                    JOptionPane.showMessageDialog(this, "Archivo Incompatible");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Guardar Documento");
            }
        }
    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void lexico(){
        PySystemState estado=new PySystemState();
        estado.argv.append(new PyString(ruta));
        PythonInterpreter interprete=new PythonInterpreter(null,estado);
        interprete.execfile(rutaActual+"\\AutomataLexico.py");
        jTextAreaLexico.setText("");
        BufferedReader entrada=null;
        try{
           entrada=new BufferedReader(new FileReader(rutaActual+"\\tokens_lexico.txt"));
           String cadena;
           while((cadena=entrada.readLine())!=null){
               jTextAreaLexico.append(cadena+'\n');
           }
        }catch(IOException e){  
        }finally{
            try{
                entrada.close();
            }catch(Exception el){
                System.out.println("Ha habido un error. Favor de verificar");
            }
        }
        //Errores
        jTextAreaErrores.setText("Errores Lexicos: \n");
        try{
            entrada=new BufferedReader(new FileReader(rutaActual+"\\error_lexico.txt"));
            String variable;
            while((variable=entrada.readLine())!=null){
                jTextAreaErrores.append("\t"+variable+'\n'); 
            }
        }catch(IOException e){
        }finally{
            try{
                entrada.close();
            }catch(Exception el){
                System.out.println("Ha habido un error. Revise su código");
            }
        }
        this.sintactico();
    }
    private void sintactico() {
       String rutaActual=System.getProperty("user.dir");
       Path rutaNueva=Paths.get(rutaActual);
       Path sintacticoScript=Paths.get(rutaNueva.toString()).resolve("parserSintactico.py");
       
       try{
           String SP=Py.ejecutarPython(sintacticoScript.toString());
           this.jTextAreaSintactico.setText(SP);    
       }catch(IOException e){
           e.printStackTrace();
       }
       
       //Open AS
       jTextAreaSintactico.setText("");
       BufferedReader entrada=null;
       try{
          entrada=new BufferedReader(new FileReader(rutaActual+"\\arbol_sintactico.txt"));
          String cadena;
          while((cadena=entrada.readLine())!=null){
              jTextAreaSintactico.append(cadena+'\n');
          }
       }catch(IOException e){
           
       }finally{
           try{
               entrada.close();
           }catch(Exception el){
               System.out.println("Ha habido un error en su sintaxis. favor verificar");
           }
       }
       
       //Errores Sintacticos
       try{
           jTextAreaErrores.append("\nErrores Sintácticos: "+'\n');
           entrada=new BufferedReader(new FileReader(rutaActual+"\\errore_sintactico.txt"));
           String cadena;
           while((cadena=entrada.readLine())!=null){
               jTextAreaErrores.append("\t"+cadena+'\n');
           }
       }catch (IOException e){
           
       }finally{
           try{
               entrada.close();
           }catch(Exception el){
               System.out.println("Ya se me acabaron las expeciones. Imagine la excepcion que quiera");
           }
       }
               
    }
    
    
    private void jMenuItemCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompActionPerformed
          lexico();
          sintactico();
    }//GEN-LAST:event_jMenuItemCompActionPerformed
    //Funciones varias
    private void pintarColores() {
        final StyleContext contexto = StyleContext.getDefaultStyleContext();
        //colores
        final AttributeSet colorRojo = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(156, 37, 21));
        final AttributeSet colorAzul = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(107, 165, 209));
        final AttributeSet colorVerde = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(1, 167, 36));
        //Fin Primarios
        final AttributeSet colorAmarillo = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(211, 244, 70));
        final AttributeSet colorAqua = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(35, 210, 204));
        final AttributeSet colorGrisClaro = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(120, 129, 163));
        final AttributeSet colorBase = contexto.addAttribute(contexto.getEmptySet(), StyleConstants.Foreground, new Color(0,51,102));
        //Fin Colores
        DefaultStyledDocument documento = new DefaultStyledDocument() {

            @Override
            public void postRemoveUpdate(AbstractDocument.DefaultDocumentEvent chng) {
                try {
                    super.postRemoveUpdate(chng);
                    String text = getText(0, getLength());
                    Matcher matcher;
                    //Palabras Reservadas
                    Pattern pReservadas = Pattern.compile("\\b(main|if|IF|else|ELSE|end|END|do|DO|while|WHILE|then|THEN|repeat|REPEAT|until|UNTIL|cin|cout|print|def)\\b");
                    matcher = pReservadas.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAzul, true);
                    }
                    //Valores Numericos
                    Pattern numeros = Pattern.compile("\\b(-?\\d+(\\.\\d+)?)\\b");
                    matcher = numeros.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorVerde, true);
                    }
                    //Booleanos
                    Pattern booleano = Pattern.compile("\\b(true|TRUE|false|FALSE)\\b");
                    matcher = booleano.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorRojo, true);
                    }
                    //Tipos de Datos
                    Pattern tDatos = Pattern.compile("\\b(int|INT|real|REAL|boolean|BOOLEAN)\\b");
                    matcher = tDatos.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAqua, true);
                    }
                    //Operadores
                    Pattern operadores = Pattern.compile("[+-/=<>!]");
                    matcher = operadores.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAmarillo, true);
                    }
                    //Comentarios
                    Pattern comentarios = Pattern.compile("\\//\\/.\\#");
                    matcher = comentarios.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorGrisClaro, true);
                    }
                    //Cometarios Multiples
                    Pattern mComentarios = Pattern.compile("\\/*\\*.*?\\*/\\//", Pattern.DOTALL);
                    matcher = mComentarios.matcher(text);
                    while (matcher.find()) {
                        setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorGrisClaro, true);
                    }

                } catch (BadLocationException ex) {
                    Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //Pintamos los datos
            @Override
            public void insertString(int offset, String llave, AttributeSet at) throws BadLocationException {
                super.insertString(offset, llave, at);
                String text = getText(0, getLength());
                setCharacterAttributes(0, getLength(), colorBase, true);
                Matcher matcher;
                //Palabras Reservadas
                Pattern pReservadas = Pattern.compile("\\b(main|if|IF|else|ELSE|end|END|do|DO|while|WHILE|then|THEN|repeat|REPEAT|until|UNTIL|cin|cout|print|def)\\b");
                matcher = pReservadas.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAzul, true);
                }
                //Valores Numericos
                Pattern numeros = Pattern.compile("\\b(-?\\d+(\\.\\d+)?)\\b");
                matcher = numeros.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorVerde, true);
                }
                //Booleanos
                Pattern booleano = Pattern.compile("\\b(true|TRUE|false|FALSE)\\b");
                matcher = booleano.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorRojo, true);
                }
                //Tipos de Datos
                Pattern tDatos = Pattern.compile("\\b(int|INT|real|REAL|boolean|BOOLEAN)\\b");
                matcher = tDatos.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAqua, true);
                }
                //Operadores
                Pattern operadores = Pattern.compile("[+-/=<>!]");
                matcher = operadores.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorAmarillo, true);
                }
                // Comentarios
                Pattern comentarios = Pattern.compile("\\/\\/[^\\n]*");
                matcher = comentarios.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorGrisClaro, true);
                }

                // Comentarios Multiples
                Pattern mComentarios = Pattern.compile("\\/\\*.*?\\*\\/", Pattern.DOTALL);
                matcher = mComentarios.matcher(text);
                while (matcher.find()) {
                    setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), colorGrisClaro, true);
                }
            }

        };

        String temp = this.jTextPaneCodigo.getText();
        this.jTextPaneCodigo.setStyledDocument(documento);
        this.jTextPaneCodigo.setText(temp);

    }
    //Fin pintar colores
    
        private void touchdown(java.awt.event.KeyEvent ev) throws IOException, FileNotFoundException {
        int keyCode = ev.getKeyCode();
        if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 97 && keyCode <= 122)
                || (keyCode != 37 && !(keyCode >= 37 && keyCode <= 40) && !(keyCode >= 16 && keyCode <= 18)
                && keyCode != 524 && keyCode != 20)) {
            if (!getTitle().contains("*")) {
                setTitle(getTitle() + "*");
            }
        }
    }//Fin touchdown

         public void abrirContenido(String ruta) throws FileNotFoundException, IOException {
        String cadena;
        StringBuilder contenido = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new FileReader(ruta))) {
            while ((cadena = br.readLine()) != null) {
                System.out.println("Se ha entrado a abrir el contenido");
                System.out.println(cadena);
                jTextAreaErrores.append(cadena + '\n');
                contenido.append(cadena).append("\n");
            }
        }

        // Sobrescribir el archivo de texto con el contenido en blanco
        try (PrintWriter pw = new PrintWriter(new FileWriter(ruta))) {
            pw.print("");
        }

        FileWriter fw = new FileWriter(ruta);
        fw.write(contenido.toString());
        fw.close();
    }// Fin Abrir contenido
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuCompilar;
    private javax.swing.JMenu jMenuEditar;
    private javax.swing.JMenu jMenuFormato;
    private javax.swing.JMenuItem jMenuItemArchivo;
    private javax.swing.JMenuItem jMenuItemComp;
    private javax.swing.JMenuItem jMenuItemDebug;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JPanel jPanelCI;
    private javax.swing.JPanel jPanelErrores;
    private javax.swing.JPanel jPanelLexico;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JPanel jPanelResultados;
    private javax.swing.JPanel jPanelSemantico;
    private javax.swing.JPanel jPanelSintactico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPaneResultados;
    private javax.swing.JTabbedPane jTabbedPaneTypes;
    private javax.swing.JTextArea jTextAreaCI;
    private javax.swing.JTextArea jTextAreaErrores;
    private javax.swing.JTextArea jTextAreaLexico;
    private javax.swing.JTextArea jTextAreaResultados;
    private javax.swing.JTextArea jTextAreaSemantico;
    private javax.swing.JTextArea jTextAreaSintactico;
    private javax.swing.JTextPane jTextPaneCodigo;
    // End of variables declaration//GEN-END:variables


}
